import logging
import math

import discord
from discord.ext import commands
from templatebot.discordplus import commandsplus

from templatebot import __version__
from templatebot import conf
from templatebot.lib import utils


logger = logging.getLogger("templatebot")

# name
# description
#     The message prefixed into the default help command.
# help = inspect.cleandoc(self.__doc__)
#     The long help text for the command.
# brief
#     The short help text for the command.
# short_doc = self.brief or help.split("\n")[0]
#     Gets the “short” documentation of a command.
# usage = ""
#     A replacement for arguments in the default help text.
# signature
#     Returns a POSIX-like signature useful for help command output.
# hidden = False
#     If True, the default help command does not show this in the help output.
# aliases = []


class HelpCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def send_summary_help(self, ctx):
        """Sends help summary.

        Help

        Commands

        {cmd.name} - {cmd.brief (or first line of cmd.help)}
        {cmd.name} - {cmd.brief (or first line of cmd.help)}
        ...
        """

        embedCount = 1
        pagesPerEmbed = 4

        embeds = [discord.Embed(title=(f"Help [templatebot {__version__}]" if n == 0 else None)) for n in range(embedCount)]

        commands = sorted((c for c in ctx.bot.commands if not c.hidden), key=lambda c: c.name)

        commandsPerPage = math.ceil(len(commands) / (embedCount * pagesPerEmbed))

        commandStrings = [f"**{c.name}**{' *(' + ', '.join(c.aliases) + ')*' if c.aliases else ''}\n{c.short_doc or '-'}" for c in commands]

        pages = ["\n".join(p) for p in utils.chunkList(commandStrings, commandsPerPage)]

        for n, p in enumerate(pages):
            if n == 2:
                embeds[math.floor(n / pagesPerEmbed)].add_field(name="\u200b", value="\u200b", inline=False)
            embeds[math.floor(n / pagesPerEmbed)].add_field(name=("Commands" if n == 0 else "\u200b"), value=p, inline=True)

        for e in embeds:
            await ctx.send(embed=e)

    async def send_command_help(self, ctx, cmd):
        """Sends help for a command.

        Help

        {prefix}{cmd.name} {cmd.usage (or autogenerated signature)}

        {cmd.description (optional)}

        {cmd.help (docstring, optional)}

        Aliases:
        alias1, alias2
        """
        signature = f"{ctx.prefix}{cmd.name} {cmd.signature}"

        descriptionParts = []
        if cmd.description:
            descriptionParts.append(cmd.description)
        if cmd.help:
            descriptionParts.append(cmd.help)
        description = ""
        if "is_owner" in repr(cmd.checks):
            description += ":rotating_light: **THIS COMMAND IS FOR BOT OWNERS ONLY** :rotating_light:\n"
        if "is_mod" in repr(cmd.checks):
            description += ":rotating_light: **THIS COMMAND IS FOR SERVER MODS ONLY** :rotating_light:\n"
        if "guild_only" in repr(cmd.checks):
            description += "*This command can only be run in a server, and not in DMs.*\n"
        description += "\n\n".join(descriptionParts).replace("&", conf.prefix)

        embed = discord.Embed(
            title=signature,
            description=description
        ).set_author(name=f"Help [templatebot {__version__}]")

        if cmd.aliases:
            embed.add_field(name="**Aliases:**", value=", ".join(cmd.aliases), inline=False)

        await ctx.send(embed=embed)

    @commandsplus.command(
        description="[description]",
        usage="[usage]",
        aliases=["helpme", "wtf"]
    )
    async def help(self, ctx, cmdName: str = None):
        """[cmd.help[0]]

        [cmd.help[2]]
        [cmd.help[3]]
        """
        bot = ctx.bot
        if cmdName is None:
            await self.send_summary_help(ctx)
            return

        cmd = bot.all_commands.get(cmdName)
        if cmd:
            await self.send_command_help(ctx, cmd)
            return

        await ctx.send(f"Unrecognized command: `{cmdName}`.")

    @commandsplus.command(
        usage = ["[type]"]
    )
    async def ping(self, ctx, subcommand: str = ""):
        """Pong!

        Check templatebot's current latency.

        Check the bot's latency with `&ping`, or check the Discord API's latency with `&ping discord`."""
        waitMsg = await ctx.send("Loading...")

        if subcommand.lower() in ["heartbeat", "discord"]:
            response = f"Pong! :ping_pong:\nDiscord HEARTBEAT latency: {round(self.bot.latency, 3)} seconds"
        else:
            messageLatency = waitMsg.created_at - ctx.message.created_at
            response = f"Pong! :ping_pong:\nCommand latency: {utils.prettyTimeDelta(messageLatency.total_seconds(), True)}"
        await waitMsg.edit(content = response)


def setup(bot):
    bot.add_cog(HelpCog(bot))
